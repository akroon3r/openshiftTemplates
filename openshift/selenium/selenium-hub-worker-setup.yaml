apiVersion: v1
kind: Template
labels:
  template: selenium-build-pipeline
message: |-
  Set up a selenium hub and preferred node of choice for testing.
  Requires a working Jenkins instance in your Openshift Tools Namespace
  prior to creating these services.
metadata:
  annotations:
    openshift.io/display-name: Selenium Hub/Worker Template
    description: |-
      Create a Selenium hub and worker (chrome or firefox) to handle automation
      of frontend testing via ci/cd pipelines
    iconClass: icon-jenkins
    tags: instant-app,jenkins
  name: pipeline-build-template
parameters:
- description: The OpenShift Namespace WITH prefix
  displayName: Namespace (ie// pjztlm-tools)
  name: namespace
  required: true
- description: Selenium Node Worker (ie// chrome OR firefox)
  displayName: Selenium Node
  name: seleniumNode
  required: true
  value: 'chrome'
objects:
- kind: "BuildConfig"
  apiVersion: "v1"
  metadata:
    name: selenium-hub-node-setup-pipeline
  spec:
    strategy:
      jenkinsPipelineStrategy:
        env: 
        - name: SELENIUM_NODE
          value: "${seleniumNode}"
        jenkinsfile: |-
          try {
              node(){
                stage('Checkout Selenium Github') {
                  dir('selenium'){
                    git url: "https://github.com/akroon3r/selenium-openshift-templates"
                  }
                }
                stage('Create Seleinum Hub'){
                  dir('selenium'){
                    openshift.withCluster() {
                      openshift.withProject() {
                        // Trigger deploy config here
                        sh  'echo Deploying Hub'
                        processApply("selenium-hub-dc.yaml", "frjeow-tools", "hub")
                        sh 'echo Creating Hub Route'
                        processApply("selenium-hub-service.yaml", "frjeow-tools", "hub")
                        sh 'echo Creating Hub Service'
                        processApply("selenium-hub-route.yaml", "frjeow-tools", "hub")
                      }
                    }
                  }
                }
                stage('Deploy chosen worker node'){
                  dir('selenium'){
                    openshift.withCluster(){
                      openshift.withProject(){
                        if( "${SELENIUM_NODE}" == "chrome" ) {
                          sh 'echo Creating Chrome Node Imagestream'
                          processApply("selenium-node-chrome-imagestream.yaml", "frjeow-tools", "chrome")
                          sh 'echo Creating Chrome Node Build Config'
                          processApply("selenium-node-chrome-bc.yaml", "frjeow-tools", "chrome")
                          sh 'echo Deploying Chrome Node'
                          processApply("selenium-node-chrome-dc.yaml", "frjeow-tools", "chrome")
                          sh 'echo Creating Chrome Node Service'
                          processApply("selenium-node-chrome-service.yaml", "frjeow-tools", "chrome") 
                        }
                        else if( "${SELENIUM_NODE}" == "firefox" ){
                          sh 'echo Creating Firefox Node Imagestream'
                          processApply("selenium-node-firefox-imagestream.yaml", "frjeow-tools", "firefox")
                          sh 'echo Creating Firefox Node Build Config'
                          processApply("selenium-node-firefox-bc.yaml", "frjeow-tools", "firefox")
                          sh 'echo Deploying Firefox Node'
                          processApply("selenium-node-firefox-dc.yaml", "frjeow-tools", "firefox")
                          sh 'echo Creating Firefox Node Service'
                          processApply("selenium-node-firefox-service.yaml", "frjeow-tools", "firefox") 
                        }
                      }
                    }
                  }
                }
              }
          } catch (err) {
            echo "in catch block"
            currentBuild.result = 'FAILURE'
            env.ERR = "${err}"
            echo "Caught: ${err}"
            throw err
          }

          def processApply(String targetFile, String namespace, String worker) {
            if ( "${worker}" == 'chrome') {
              sh  """
                  cd selenium-node-chrome-components
                  oc process -f '${targetFile}' | 
                  oc apply -f - -n '${namespace}'
                  """
            }
            else if ( "${worker}" == 'firefox') {
              sh  """
                  cd selenium-node-firefox-components
                  oc process -f '${targetFile}' | 
                  oc apply -f - -n '${namespace}'
                  """
            }
            else if ( "${worker}" == 'hub') {
              sh  """
                  cd selenium-hub-components
                  oc process -f '${targetFile}' | 
                  oc apply -f - -n '${namespace}'
                  """
            }
          }
      type: JenkinsPipeline
